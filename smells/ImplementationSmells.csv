Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2,55
javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2,55
javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2,89
javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2,89
javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2,89
javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2,89
javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.,57
javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.,109
javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.,186
javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.,117
javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. ,81
javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100,81
javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21,232
javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2,232
javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2,232
javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2,232
javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@7994d134,232
javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2,327
javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.,467
javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10,467
javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2,467
javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.,125
javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.,163
javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.,163
javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.,182
javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8,182
javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.,182
javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.,243
javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@6cf9d125,113
javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.,58
javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.,58
javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11,83
javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.,195
javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.,128
javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.,127
javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.,127
javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.,142
javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11,157
javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11,175
javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12,246
javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@1b253c48,246
javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9,249
javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@1b253c48,249
javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.,272
javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.,272
javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16,326
javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.,186
javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 37,186
javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 135 lines of code.,186
javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9,89
javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@2e4a1d6,89
javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2,105
javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.,80
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4,122
javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.,149
javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.,188
javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.,198
javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.,269
javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.,269
javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.,129
javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.,143
javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.,190
javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.,205
javapoet,com.squareup.javapoet,AnnotationSpecTest,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.,120
javapoet,com.squareup.javapoet,AnnotationSpecTest,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.,157
javapoet,com.squareup.javapoet,AnnotationSpecTest,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.,193
javapoet,com.squareup.javapoet,AnnotationSpecTest,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.,193
javapoet,com.squareup.javapoet,AnnotationSpecTest,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.,206
javapoet,com.squareup.javapoet,AnnotationSpecTest,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.,206
javapoet,com.squareup.javapoet,AnnotationSpecTest,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.,206
javapoet,com.squareup.javapoet,AnnotationSpecTest,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.,206
javapoet,com.squareup.javapoet,AnnotationSpecTest,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.,245
javapoet,com.squareup.javapoet,AnnotationSpecTest,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123,245
javapoet,com.squareup.javapoet,AnnotationSpecTest,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.,264
javapoet,com.squareup.javapoet,AnnotationSpecTest,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1014.,298
javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.,55
javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.,63
javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.,87
javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.,117
javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.,148
javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.,148
javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.,172
javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.,172
javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.,172
javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.,133
javapoet,com.squareup.javapoet,CodeBlockTest,testJoining,Long Statement,The length of the statement "List<CodeBlock> codeBlocks=Arrays.asList(CodeBlock.of("String")`CodeBlock.of("name")`CodeBlock.of("=")`CodeBlock.of("\"John\""));" is 129.,350
javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.,51
javapoet,com.squareup.javapoet,FieldSpecTest,testToBuilder,Long Statement,The length of the statement "FieldSpec originalField=FieldSpec.builder(fieldType`fieldName`modifier).addJavadoc(javadoc).addAnnotation(annotation).initializer(initializer).build();" is 151.,68
javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.,48
javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.,63
javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.,76
javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.,86
javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.singletonList("-proc:none")`null`Collections.singleton(javaFile.toJavaFileObject()));" is 172.,86
javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.,86
javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.,148
javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.,170
javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.,170
javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.,201
javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.,201
javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.,54
javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.,54
javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.,54
javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.,99
javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.,123
javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.,123
javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.,161
javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.,161
javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.,183
javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.,199
javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.,218
javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.,238
javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.,256
javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.,279
javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.,279
javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.,296
javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.,296
javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.,316
javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.,316
javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.,337
javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.,337
javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.,357
javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.,357
javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.,379
javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.,379
javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.,415
javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.,415
javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.,451
javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.,451
javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.,491
javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.,491
javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.,512
javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.,512
javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.,526
javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.,526
javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.,541
javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.,541
javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.,558
javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.,558
javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.,573
javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.,573
javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.,590
javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.,590
javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.,614
javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.,614
javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.,636
javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.,648
javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.,648
javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.,662
javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.,662
javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.,680
javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.,680
javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.,699
javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.,699
javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.,715
javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.,715
javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.,735
javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.,735
javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.,751
javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.,751
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.,768
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.,768
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.,799
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.,799
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.,830
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.,830
javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.,887
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.,899
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.,899
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.,920
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.,920
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.,941
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.,941
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.,963
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.,963
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.,1000
javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.,1000
javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10,26
javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2,26
javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10,36
javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2,36
javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10,46
javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2,46
javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10,56
javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2,56
javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10,66
javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10,90
javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2,90
javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10,102
javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2,102
javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10,114
javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10,122
javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2,122
javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10,131
javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2,131
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10,140
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2,140
javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10,151
javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2,151
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10,162
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2,162
javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10,173
javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2,173
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10,184
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2,184
javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2,184
javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10,196
javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2,196
javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2,196
javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.,150
javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.,163
javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.,186
javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.,198
javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.,198
javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.,198
javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.,222
javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyParameterAnnotations,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder(implClassName).superclass(abstractTypeElement.asType()).addMethod(MethodSpec.overriding(fooElement).build()).build();" is 153.,264
javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.,294
javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.,294
javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.,308
javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.,308
javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.,329
javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.,329
javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.,347
javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.,347
javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.,390
javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.,415
javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.,448
javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.,448
javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.,467
javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.,467
javapoet,com.squareup.javapoet,MethodSpecTest,testAddAnnotations,Magic Number,The method contains a magic number: 2,490
javapoet,com.squareup.javapoet,MethodSpecTest,testAddTypeVariables,Magic Number,The method contains a magic number: 2,501
javapoet,com.squareup.javapoet,MethodSpecTest,testAddNamedCode,Magic Number,The method contains a magic number: 42,532
javapoet,com.squareup.javapoet,MethodSpecTest,testAddNamedCode,Magic Number,The method contains a magic number: 42,532
javapoet,com.squareup.javapoet,MethodSpecTest,testAddComment,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("testMethod").addComment("This is a comment with args: %s` %d").returns(void.class).addModifiers(Modifier.PUBLIC);" is 166.,543
javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2,26
javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2,26
javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2,41
javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3,41
javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2,41
javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3,41
javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2,61
javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2,99
javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3,99
javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2,99
javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3,99
javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.,140
javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.,79
javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.,91
javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.,91
javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.,139
javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.,156
javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.,60
javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.,60
javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424,60
javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.,84
javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.,84
javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.,84
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.,112
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.,112
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.,112
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.,112
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.,172
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.,172
javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.,208
javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.,208
javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.,230
javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.,230
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.,288
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.,288
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.,307
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.,307
javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12,307
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.,350
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.,350
javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.,408
javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.,408
javapoet,com.squareup.javapoet,TypeSpecTest,noEnumConstants,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " ;\n"+ " static String NO_ENUM;\n"+ "}\n");" is 187.,438
javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.,453
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.,463
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.,463
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.,490
javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.,490
javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.,515
javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.,515
javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.,552
javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.,552
javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.,607
javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.,607
javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.,630
javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.,630
javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.,651
javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.,651
javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.,674
javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.,674
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.,694
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.,694
javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.,710
javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.,710
javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.,783
javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.,783
javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.,802
javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.,802
javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.,822
javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.,822
javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101,822
javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.,841
javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.,841
javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.,856
javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.,856
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.,871
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.,871
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.,892
javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.,892
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Empty catch clause,The method has an empty catch block.,913
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Empty catch clause,The method has an empty catch block.,913
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Empty catch clause,The method has an empty catch block.,913
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Long Statement,The length of the statement "TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PRIVATE`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 224.,913
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Long Statement,The length of the statement "TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PRIVATE`Modifier.ABSTRACT).returns(int.class).build()).build();" is 163.,913
javapoet,com.squareup.javapoet,TypeSpecTest,invalidInterfacePrivateMethods,Long Statement,The length of the statement "TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PRIVATE`Modifier.PUBLIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 223.,913
javapoet,com.squareup.javapoet,TypeSpecTest,interfacePrivateMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PRIVATE).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 220.,951
javapoet,com.squareup.javapoet,TypeSpecTest,interfacePrivateMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " private int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.,951
javapoet,com.squareup.javapoet,TypeSpecTest,interfacePrivateMethods,Long Statement,The length of the statement "bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PRIVATE`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 227.,951
javapoet,com.squareup.javapoet,TypeSpecTest,interfacePrivateMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " private static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 169.,951
javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.,990
javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.,990
javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.,990
javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.,1053
javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.,1072
javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.,1072
javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.,1140
javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.,1152
javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.,1152
javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.,1174
javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.,1186
javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.,1186
javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.,1229
javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.,1229
javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500,1229
javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.,1261
javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.,1261
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.,1280
javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.,1351
javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.,1351
javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.,1377
javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.,1377
javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.,1403
javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.,1403
javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.,1425
javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.,1425
javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.,1445
javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.,1445
javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.,1473
javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.,1473
javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.,1502
javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.,1502
javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.,1559
javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.,1559
javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.,1592
javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.,1592
javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.,1636
javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.,1636
javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.,1650
javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.,1650
javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.,1662
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.,1679
javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.,1679
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.,1715
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.,1715
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.,1743
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.,1743
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.,1743
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.,1804
javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.,1804
javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.,1823
javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.,1823
javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.,1823
javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.,1853
javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.,1853
javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.,1883
javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.,1883
javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.,1911
javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.,1911
javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42,1911
javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4,1911
javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.,1977
javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.,1977
javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.,2013
javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.,2013
javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.,2038
javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.,2038
javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.,2056
javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.,2056
javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.,2080
javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.,2080
javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.,2233
javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.,2233
javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.,2233
javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.,2251
javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.,2251
javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.,2267
javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.,2267
javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.,2303
javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.,2303
javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.,2350
javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.,2350
javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.,2350
javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.,2424
javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.,2433
javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.,2442
javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32,2442
javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.,2471
javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.,2471
javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.,2520
javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.,2588
javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.,2608
javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.,2623
